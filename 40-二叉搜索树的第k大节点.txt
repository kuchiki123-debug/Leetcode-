给定一棵二叉搜索树，请找出其中第 k 大的节点的值。

示例 1:
输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 4

示例 2:
输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 4

1.<set>
class Solution {
public:
    set<int>S;
    int count = 0;
    void dfs(TreeNode* root)
    {
        if(root == nullptr)return;
        S.insert(root->val);
        dfs(root->left);
        dfs(root->right);
        count++;
    }

    int kthLargest(TreeNode* root, int k) {
        //if(root == nullptr)return NULL;
        dfs(root);
        int i = 0;
        for(set<int>::iterator it = S.begin();it != S.end();it++)
        {
            if(i != count - k)
            {
                i++;
            }
            else
            {
                return *it;
            }
        }
        return NULL;
    }
};

2.<vector>
class Solution {
public:
    vector<int>ans;
    void dfs(TreeNode* root)
    {
        if(root == nullptr)return;
        ans.push_back(root->val);
        dfs(root->left);
        dfs(root->right);
    }

    int kthLargest(TreeNode* root, int k) {
        //if(root == nullptr)return NULL;
        dfs(root);
        sort(ans.begin(),ans.end());
        reverse(ans.begin(),ans.end());
        return ans[k - 1];
    }
};