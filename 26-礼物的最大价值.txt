在一个 m*n 的棋盘的每一格都放有一个礼物，
每个礼物都有一定的价值（价值大于 0）。
你可以从棋盘的左上角开始拿格子里的礼物，
并每次向右或者向下移动一格、直到到达棋盘的右下角。
给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？

示例 1:
输入: 
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 12
解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物

1.
class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {
        for(int i = 0;i < grid.size();i++)
        {
            for(int j = 0;j < grid[0].size();j++)
            {
                if(i == 0 && j != 0)grid[i][j] = grid[i][j] + grid[i][j - 1];
                if(i != 0 && j == 0)grid[i][j] = grid[i][j] + grid[i - 1][j];
                if(i != 0 && j != 0)grid[i][j] = max(grid[i][j] + grid[i][j - 1],grid[i][j] + grid[i - 1][j]);
            }
        }
        return grid[grid.size() - 1][grid[0].size() - 1];
    }
};

2.贪心法（有局限性）
class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {
        if(grid.empty())
        {
            return 0;
        }
        int m = grid.size() - 1;
        int n = grid[0].size() - 1;
        int k = 0,h = 0;
        int ans = grid[0][0];
        for(int i = 0;i < m + n;i++)
        {
            if(k < m && h < n)
            {
                if(grid[k][h + 1] < grid[k + 1][h])
                {
                    ans = ans + grid[k + 1][h];
                    k++;
                }else
                {
                    ans = ans + grid[k][h + 1];
                    h++;
                }

            }else if(k == m && h < n)
            {
                ans = ans + grid[k][h + 1];
                h++;
            }else if(h == n && k < m)
            {
                ans = ans + grid[k + 1][h];
                k++;
            }
        }
        return ans;
    }
};