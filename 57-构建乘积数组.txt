给定一个数组 A[0,1,…,n-1]，请构建一个数组 B[0,1,…,n-1]，
其中 B[i] 的值是数组 A 中除了下标 i 以外的元素的积,
 即 B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]。不能使用除法。

示例:
输入: [1,2,3,4,5]
输出: [120,60,40,30,24]

1、（超时写法）
class Solution {
public:
    vector<int> constructArr(vector<int>& a) {
        int len = a.size();
        int ans = 1;
        vector<int>result;
        for(int i = 0;i < len;i++)
        {
            for(int j = 0;j < len;j++)
            {
                if(j == i)continue;
                ans = ans * a[j];
            }
            result.push_back(ans);
            ans = 1;   
        }
        return result;
    }
};

2.（两次循环 + '0'计数器）
class Solution {
public:
    vector<int> constructArr(vector<int>& a) {
        int sum = 1, flag = 0;;
        vector<int>result;
        for(int i = 0;i < a.size();i++)
        {
            if(a[i] == 0)
            {
                flag++;
                continue;
            }
            sum = sum * a[i];
        }
        for(int i = 0;i < a.size();i++)
        {
            if(flag == 1 && a[i] != 0 || flag > 1)
            {
                result.push_back(0);
            }else if(flag == 1 && a[i] == 0)
            {
                result.push_back(sum);
            }else
            {
                result.push_back(sum/a[i]);
            }  
        }
        return  result;
    }
};

3.（不适用减法）
初始化：数组 BB ，其中 B[0] = 1B[0]=1 ；辅助变量 tmp = 1tmp=1 ；
计算 B[i]B[i] 的 下三角 各元素的乘积，直接乘入 B[i]B[i] ；
计算 B[i]B[i] 的 上三角 各元素的乘积，记为 tmptmp ，并乘入 B[i]B[i] ；
返回 BB 。
class Solution {
public:
    vector<int> constructArr(vector<int>& a) {
        int len = a.size();
        if(len == 0) return {};
        vector<int> b(len, 1);
        b[0] = 1;
        int tmp = 1;
        for(int i = 1; i < len; i++) {
            b[i] = b[i - 1] * a[i - 1];
        }
        for(int i = len - 2; i >= 0; i--) {
            tmp *= a[i + 1];
            b[i] *= tmp;
        }
        return b;
    }
};
