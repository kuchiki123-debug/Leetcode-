如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，
那么中位数就是所有数值排序之后位于中间的数值。
如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。
例如，
[2,3,4] 的中位数是 3
[2,3] 的中位数是 (2 + 3) / 2 = 2.5
设计一个支持以下两种操作的数据结构：
void addNum(int num) - 从数据流中添加一个整数到数据结构中。
double findMedian() - 返回目前所有元素的中位数。

示例 1：
输入：
["MedianFinder","addNum","addNum","findMedian","addNum","findMedian"]
[[],[1],[2],[],[3],[]]
输出：[null,null,null,1.50000,null,2.00000]

示例 2：
输入：
["MedianFinder","addNum","findMedian","addNum","findMedian"]
[[],[2],[],[3],[]]
输出：[null,null,2.00000,null,2.50000]

1.（优先队列，堆）
class MedianFinder {
public:
    /** initialize your data structure here. */
    priority_queue<int>small;
    priority_queue<int,vector<int>,greater<int>>big;
    int n;
    MedianFinder() {
        n = 0;
    }
    
    void addNum(int num) {
        if(small.empty()){small.push(num);n++;return;}
        if(num <= small.top()){small.push(num);n++;}
        else{big.push(num);n++;}
        if(small.size() - big.size() == 2){big.push(small.top());small.pop();}
        if(big.size() - small.size() == 2){small.push(big.top());big.pop();}
    }
    
    double findMedian() {
        if(n % 2)
        {
            if(small.size() > big.size()){return small.top();}
            return big.top();
        }else{
            return ((long long)small.top() + big.top()) * 0.5;
        }
    }
};
